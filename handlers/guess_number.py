# handlers/guess_number.py
import random
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.reply import guess_number_buttons, main_menu, remove_kb

router = Router()

class GuessNumberGame(StatesGroup):
    number = State()
    attempts = State()

MAX_ATTEMPTS = 7
MAX_NUMBER = 100

@router.message(lambda message: message.text == "üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
async def start_guess_number(message: types.Message, state: FSMContext):
    secret_number = random.randint(1, MAX_NUMBER)
    await state.update_data(number=secret_number, attempts=0)
    await state.set_state(GuessNumberGame.number)
    await message.answer(
        f"–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {MAX_NUMBER}. –£ —Ç–µ–±—è {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫!\n"
        "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:",
        reply_markup=remove_kb
    )

@router.message(GuessNumberGame.number)
async def guess_number(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return

    if message.text == "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await start_guess_number(message, state)

    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.",
            reply_markup=remove_kb
        )
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
    guess = int(message.text)

    if guess < 1 or guess > MAX_NUMBER:
        await message.answer(
            f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ {MAX_NUMBER}.",
            reply_markup=remove_kb
        )
        return

    user_data = await state.get_data()
    secret = user_data["number"]
    attempts = user_data.get("attempts", 0)

    attempts += 1
    await state.update_data(attempts=attempts)

    if guess == secret:
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret} –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫!",
            reply_markup=main_menu
        )
        await state.clear()
    elif attempts >= MAX_ATTEMPTS:
        await message.answer(
            f"üíÄ –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {secret}",
            reply_markup=main_menu
        )
        await state.clear()
    else:
        hint = "–±–æ–ª—å—à–µ" if guess < secret else "–º–µ–Ω—å—à–µ"
        remaining = MAX_ATTEMPTS - attempts
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {hint}. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}",
            reply_markup=remove_kb
        )