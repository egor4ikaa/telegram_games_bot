# handlers/reading_handler.py
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states.reading_states import ReadingWebsite
from keyboards.reply import reading_menu, main_menu

# –ü—Ä–∏–º–µ—Ä "—Å–∞–π—Ç–∞" ‚Äî —Å–ø–∏—Å–æ–∫ –∞–±–∑–∞—Ü–µ–≤
WEBSITE_CONTENT = [
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç! üåê\n–≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü.",
    "–ó–¥–µ—Å—å –≤—ã —É–∑–Ω–∞–µ—Ç–µ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –±–æ—Ç–∞—Ö.",
    "AI –∏ Telegram ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —á–∏—Ç–∞–µ—Ç–µ! üí°"
]

router = Router()

@router.message(lambda message: message.text == "üìñ –ß–∏—Ç–∞—Ç—å —Å–∞–π—Ç")
async def start_reading(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("reading_position", 0)

    if current_index >= len(WEBSITE_CONTENT):
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –≤–µ—Å—å —Å–∞–π—Ç! üéâ", reply_markup=main_menu)
        await state.clear()
        return

    # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    if current_index > 0:
        await message.answer(
            f"üìå –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á—Ç–µ–Ω–∏–µ:",
            reply_markup=reading_menu
        )
    else:
        await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å–∞–π—Ç–∞:", reply_markup=reading_menu)

    await message.answer(WEBSITE_CONTENT[current_index])
    await state.update_data(reading_position=current_index)
    await state.set_state(ReadingWebsite.reading)


@router.message(StateFilter(ReadingWebsite.reading))
async def handle_reading_actions(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("reading_position", 0)

    if message.text == "‚û°Ô∏è –î–∞–ª–µ–µ":
        next_index = current_index + 1
        if next_index >= len(WEBSITE_CONTENT):
            await message.answer("üìñ –í—ã –¥–æ—á–∏—Ç–∞–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.", reply_markup=main_menu)
            await state.clear()
        else:
            await message.answer(WEBSITE_CONTENT[next_index])
            await state.update_data(reading_position=next_index)
            await state.set_state(ReadingWebsite.reading)

    elif message.text == "üîñ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É":
        # –ó–∞–∫–ª–∞–¥–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ,
        # –Ω–æ –º–æ–∂–Ω–æ —è–≤–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        await message.answer(
            f"üîñ –ó–∞–∫–ª–∞–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {current_index + 1} –∏–∑ {len(WEBSITE_CONTENT)}.",
            reply_markup=reading_menu
        )

    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=reading_menu)