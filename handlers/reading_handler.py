# handlers/reading_handler.py
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command
from states.reading_states import ReadingWebsite
from keyboards.reply import reading_menu, main_menu
from utils.web_reader import extract_readable_text
import json
import os
import hashlib

router = Router()

# –§–∞–π–ª –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫: { "user_id:url_hash": index }
BOOKMARKS_FILE = "reading_bookmarks.json"

def get_url_hash(url: str) -> str:
    return hashlib.md5(url.encode()).hexdigest()[:10]

def load_bookmarks():
    if not os.path.exists(BOOKMARKS_FILE):
        return {}
    with open(BOOKMARKS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_bookmark(user_id: int, url: str, position: int):
    bookmarks = load_bookmarks()
    key = f"{user_id}:{get_url_hash(url)}"
    bookmarks[key] = {"url": url, "position": position}
    with open(BOOKMARKS_FILE, "w", encoding="utf-8") as f:
        json.dump(bookmarks, f, ensure_ascii=False, indent=2)

def get_bookmark(user_id: int, url: str) -> int:
    bookmarks = load_bookmarks()
    key = f"{user_id}:{get_url_hash(url)}"
    return bookmarks.get(key, {}).get("position", 0)

@router.message(lambda message: message.text == "üìñ –ß–∏—Ç–∞—Ç—å —Å–∞–π—Ç")
async def request_url(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å:")
    await state.set_state(ReadingWebsite.waiting_for_url)

@router.message(StateFilter(ReadingWebsite.waiting_for_url))
async def process_url(message: types.Message, state: FSMContext):
    if not message.text.startswith(("http://", "https://")):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://).")
        return

    url = message.text
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

    paragraphs = extract_readable_text(url)

    if len(paragraphs) == 1 and paragraphs[0].startswith("‚ùå –û—à–∏–±–∫–∞"):
        await message.answer(paragraphs[0], reply_markup=main_menu)
        await state.clear()
        return

    if not paragraphs:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.", reply_markup=main_menu)
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_id = message.from_user.id
    saved_position = get_bookmark(user_id, url)

    if saved_position >= len(paragraphs):
        saved_position = 0  # —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è

    await state.update_data(
        url=url,
        content=paragraphs,
        reading_position=saved_position
    )
    await state.set_state(ReadingWebsite.reading)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü
    if saved_position > 0:
        await message.answer(f"üìå –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á—Ç–µ–Ω–∏–µ:", reply_markup=reading_menu)
    else:
        await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ:", reply_markup=reading_menu)

    await message.answer(paragraphs[saved_position])

@router.message(StateFilter(ReadingWebsite.reading))
async def handle_reading_actions(message: types.Message, state: FSMContext):
    data = await state.get_data()
    content = data.get("content", [])
    current_index = data.get("reading_position", 0)
    url = data.get("url", "")

    if not content:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu)
        await state.clear()
        return

    user_id = message.from_user.id

    if message.text == "‚û°Ô∏è –î–∞–ª–µ–µ":
        next_index = current_index + 1
        if next_index >= len(content):
            await message.answer("üìñ –í—ã –¥–æ—á–∏—Ç–∞–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞!", reply_markup=main_menu)
            await state.clear()
        else:
            await message.answer(content[next_index])
            await state.update_data(reading_position=next_index)
            save_bookmark(user_id, url, next_index)

    elif message.text == "üîñ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É":
        save_bookmark(user_id, url, current_index)
        await message.answer(
            f"üîñ –ó–∞–∫–ª–∞–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {current_index + 1} –∏–∑ {len(content)}.",
            reply_markup=reading_menu
        )

    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=reading_menu)