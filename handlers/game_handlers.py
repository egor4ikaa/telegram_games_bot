from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
import random
from aiogram.filters import Command
from states.game_states import GuessNumberGame, RPSGame
from keyboards.reply import main_menu, rps_menu, remove_keyboard, rps_after_game_menu

router = Router()

# –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∏—Ñ–∫—É –¥–ª—è –æ—à–∏–±–æ–∫
ERROR_GIF_URL = "https://i.postimg.cc/5NMKNd0F/10-cats-mem-lvjj8lt6npax.gif"

@router.message(Command("cancel"))
async def cmd_cancel_anywhere(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
            reply_markup=main_menu
        )
# ===== –£–ì–ê–î–ê–ô –ß–ò–°–õ–û =====
@router.message(lambda message: message.text == "üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
async def start_guess_number(message: types.Message, state: FSMContext):
    await state.set_state(GuessNumberGame.guessing)
    secret_number = random.randint(1, 6)
    await state.update_data(secret_number=secret_number, attempts=1)
    await message.answer(
        f"üéØ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6!\n"
        f"–£ —Ç–µ–±—è 1 –ø–æ–ø—ã—Ç–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤ —á–∞—Ç:",
        reply_markup=remove_keyboard
    )


@router.message(StateFilter(GuessNumberGame.guessing))
async def process_guess(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer_animation(
            animation=ERROR_GIF_URL,      # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ animation=
            caption="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6!"  # ‚Üê caption=
        )
        return

    user_guess = int(message.text)
    data = await state.get_data()
    secret_number = data['secret_number']
    attempts = data['attempts'] - 1

    if user_guess < 1 or user_guess > 6:
        await message.answer_animation(
            animation=ERROR_GIF_URL,      # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ animation=
            caption="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!"  # ‚Üê caption=
        )
        return

    if user_guess == secret_number:
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number}!",
            reply_markup=main_menu
        )
        await state.clear()
        return

    if attempts == 0:
        await message.answer(
            f"‚ùå –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number}.",
            reply_markup=main_menu
        )
        await state.clear()
        return

    # –î–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    hint = "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï" if user_guess > secret_number else "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï"
    await state.update_data(attempts=attempts)
    await message.answer(
        f"{hint}\n"
        f"‚ùå –ù–µ —É–≥–∞–¥–∞–ª! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n"
        f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
    )

@router.message(lambda message: message.text == "ü™®‚úÇÔ∏èüìÑ –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
async def start_rps(message: types.Message, state: FSMContext):
    await state.set_state(RPSGame.choosing)
    await message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=rps_menu
    )

@router.message(StateFilter(RPSGame.choosing))
async def process_rps_choice(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    if message.text == "üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â–µ":
        await message.answer(
            "üéÆ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=rps_menu
        )
        return

    if message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    user_choice_text = message.text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–æ–∫
    if user_choice_text == "ü™® –ö–∞–º–µ–Ω—å":
        user_choice_clean = "–∫–∞–º–µ–Ω—å"
    elif user_choice_text == "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã":
        user_choice_clean = "–Ω–æ–∂–Ω–∏—Ü—ã"
    elif user_choice_text == "üìÑ –ë—É–º–∞–≥–∞":
        user_choice_clean = "–±—É–º–∞–≥–∞"
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        await message.answer_animation(
        animation=ERROR_GIF_URL,
        caption="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=rps_menu
    )

    # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
    bot_choice = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if user_choice_clean == bot_choice:
        result = "ü§ù –ù–∏—á—å—è!"
    elif (user_choice_clean == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
         (user_choice_clean == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or \
         (user_choice_clean == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
        result = "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!"
    else:
        result = "‚ùå –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!"

    # –≠–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    emoji_map = {"–∫–∞–º–µ–Ω—å": "ü™®", "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è", "–±—É–º–∞–≥–∞": "üìÑ"}

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    await message.answer(
        f"–¢–≤–æ–π –≤—ã–±–æ—Ä: {emoji_map[user_choice_clean]} {user_choice_clean}\n"
        f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {emoji_map[bot_choice]} {bot_choice}\n\n"
        f"{result}"
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ
    await message.answer(
        "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
        reply_markup=rps_after_game_menu
    )
